/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WritingRouteImport } from './routes/writing'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as PressRouteImport } from './routes/press'
import { Route as MediaRouteImport } from './routes/media'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WritingIndexRouteImport } from './routes/writing.index'
import { Route as WritingSlugRouteImport } from './routes/writing.$slug'

const WritingRoute = WritingRouteImport.update({
  id: '/writing',
  path: '/writing',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const PressRoute = PressRouteImport.update({
  id: '/press',
  path: '/press',
  getParentRoute: () => rootRouteImport,
} as any)
const MediaRoute = MediaRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WritingIndexRoute = WritingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WritingRoute,
} as any)
const WritingSlugRoute = WritingSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => WritingRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/media': typeof MediaRoute
  '/press': typeof PressRoute
  '/projects': typeof ProjectsRoute
  '/writing': typeof WritingRouteWithChildren
  '/writing/$slug': typeof WritingSlugRoute
  '/writing/': typeof WritingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/media': typeof MediaRoute
  '/press': typeof PressRoute
  '/projects': typeof ProjectsRoute
  '/writing/$slug': typeof WritingSlugRoute
  '/writing': typeof WritingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/media': typeof MediaRoute
  '/press': typeof PressRoute
  '/projects': typeof ProjectsRoute
  '/writing': typeof WritingRouteWithChildren
  '/writing/$slug': typeof WritingSlugRoute
  '/writing/': typeof WritingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/media'
    | '/press'
    | '/projects'
    | '/writing'
    | '/writing/$slug'
    | '/writing/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/media'
    | '/press'
    | '/projects'
    | '/writing/$slug'
    | '/writing'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/media'
    | '/press'
    | '/projects'
    | '/writing'
    | '/writing/$slug'
    | '/writing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  MediaRoute: typeof MediaRoute
  PressRoute: typeof PressRoute
  ProjectsRoute: typeof ProjectsRoute
  WritingRoute: typeof WritingRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/writing': {
      id: '/writing'
      path: '/writing'
      fullPath: '/writing'
      preLoaderRoute: typeof WritingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/press': {
      id: '/press'
      path: '/press'
      fullPath: '/press'
      preLoaderRoute: typeof PressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/media': {
      id: '/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writing/': {
      id: '/writing/'
      path: '/'
      fullPath: '/writing/'
      preLoaderRoute: typeof WritingIndexRouteImport
      parentRoute: typeof WritingRoute
    }
    '/writing/$slug': {
      id: '/writing/$slug'
      path: '/$slug'
      fullPath: '/writing/$slug'
      preLoaderRoute: typeof WritingSlugRouteImport
      parentRoute: typeof WritingRoute
    }
  }
}

interface WritingRouteChildren {
  WritingSlugRoute: typeof WritingSlugRoute
  WritingIndexRoute: typeof WritingIndexRoute
}

const WritingRouteChildren: WritingRouteChildren = {
  WritingSlugRoute: WritingSlugRoute,
  WritingIndexRoute: WritingIndexRoute,
}

const WritingRouteWithChildren =
  WritingRoute._addFileChildren(WritingRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  MediaRoute: MediaRoute,
  PressRoute: PressRoute,
  ProjectsRoute: ProjectsRoute,
  WritingRoute: WritingRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
